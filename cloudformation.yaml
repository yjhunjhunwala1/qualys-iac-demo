AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  QToken:
    Description: Provide the Qualys subscription token. Follow the steps mentioned in the online help to generate SubscriptionToken.
    Type: String
    NoEcho: true
    MinLength: 1
  QEndpoint:
    Description: Provide the Qualys Gateway endpoint. Find the Gateway URL at https://www.qualys.com/platform-identification/
    Type: String
    MinLength: 1
  IntervalHours:
    Description: Set the interval period of the scan (in hours).
    Type: Number
    MinValue: 24
    Default: '24'
  Regions:
    Description: Provide the region(s) where the Snapshot scan runs. Eg, ap-south-1, us-east-1
    Type: List<String>
    MinLength: 1
    Default: 'us-east-1'
  TagKey:
    Description: Provide tag key to filter instances for Snapshot scan.
    Type: String
    MinLength: 1
    Default: 'SSM_SNAPSHOT_ENABLED'
  TagValue:
    Description: Provide tag value to filter instances for Snapshot scan.
    Type: List<String>
    MinLength: 1
    Default: 'true'
  AdditionalTagKey:
    Description: Provide additional tag key to filter instances for Snapshot scan (optional).
    Type: String
    Default: ''
  AdditionalTagValue:
    Description: Provide additional tag value to filter instances for Snapshot scan (optional).
    Type: List<String>
    Default: ''
  VpcCidr:
    Description: Provide the Vpc Cidr. Eg, 10.82.64.0/22
    Type: String
    Default: 10.10.0.0/16
    MinLength: 1
  SubnetCidr:
    Description: Provide the Subnet Cidr. Eg, 10.82.64.0/22
    Type: String
    Default: 10.10.1.0/24
    MinLength: 1
  SingleRegionConcurrency:
    Description: Number of scanner instances in a single for a region
    Type: Number
    MinValue: 1
    MaxValue: 8
    Default: 1
  Concurrency:
    Description: Concurrency for the Map State(1 for 10, 2 for 20, 3 for 30 and 4 for 40)
    Type: Number
    MinValue: 1
    MaxValue: 4
    Default: 2

Transform: "AWS::LanguageExtensions"
Conditions:
  IsAdditionalTagKeyEmpty: !Equals [!Ref "AdditionalTagKey", ""]
  IsAdditionalTagValueEmpty: !Equals [States.ArrayLength(!Ref "AdditionalTagKey"), 0]
  IsAdditionalTagEmpty: !Or
    - !Condition IsAdditionalTagKeyEmpty
    - !Condition IsAdditionalTagValueEmpty
Mappings:
  CustomVariables:
    qualys:
      qsstag: 'qualys-snapshot-scanner'
Resources:
  CrossAccountWrapper:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
        Fn::ToJsonString:
          Comment: Qualys Snapshot Scanner - Cross Account Wrapper
          StartAt: CheckExecution
          States:
            ForEachRegionXAccount:
              Type: Map
              MaxConcurrency:
                Fn::Select:
                  - !Ref Concurrency
                  - [5, 10, 20, 30, 40]
              ItemProcessor:
                ProcessorConfig:
                  Mode: INLINE
                StartAt: GetInstanceConfig
                States:
                  GetInstanceConfig:
                    Type: Task
                    Resource: arn:aws:states:::states:startExecution.sync:2
                    Parameters:
                      StateMachineArn: !Ref AWSSDKWrapperSF
                      Input:
                        EventId.$: "States.ArrayGetItem(States.StringSplit($$.Execution.Id, ':'), 7)"
                        AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$: "$$.Execution.Id"
                        service: SSM
                        method: getParameter
                        region.$: "$.region"
                        params:
                          Name: qualys-snapshot-scanner-config
                    ResultSelector:
                      vpcConfig.$: States.StringToJson($.Output.Parameter.Value)
                    ResultPath: "$.scannerInstance"
                    Next: RunPaginatedScan
                    Catch:
                      - ErrorEquals:
                        - "States.ALL"
                        Next: Finally
                  RunPaginatedScan:
                    Type: Task
                    Resource: arn:aws:states:::states:startExecution.sync:2
                    Parameters:
                      StateMachineArn: !Ref InstancePaginated
                      Input:
                        EventId.$: "States.ArrayGetItem(States.StringSplit($$.Execution.Id, ':'), 7)"
                        StatePayload.$: "$"
                        AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$: "$$.Execution.Id"
                    OutputPath: "$.Output"
                    Catch:
                      - ErrorEquals:
                        - "States.ALL"
                        Next: Finally
                    End: true
                  Finally:
                    Type: Pass
                    End: true
              End: true
              ResultPath: null
              Catch:
                - ErrorEquals:
                  - "States.ALL"
                  Next: CatchError
            CatchError:
              Type: Pass
              End: true
            CheckExecution:
              Type: Task
              Resource: arn:aws:states:::states:startExecution.sync:2
              Parameters:
                StateMachineArn: !Ref AWSSDKWrapperSF
                Input:
                  EventId.$: "States.ArrayGetItem(States.StringSplit($$.Execution.Id, ':'), 7)"
                  AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$: "$$.Execution.Id"
                  service: StepFunctions
                  method: listExecutions
                  region: !Ref AWS::Region
                  params:
                    statusFilter: RUNNING
                    stateMachineArn: arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${AWS::StackName}-qualys-cross-account-wrapper
              Next: IsRunning
              ResultSelector:
                RunningCount.$: States.ArrayLength($.Output.executions)
            IsRunning:
              Type: Choice
              Choices:
                - Variable: $.RunningCount
                  NumericGreaterThan: 1
                  Next: Pass
              Default: GetToken
            Pass:
              Type: Pass
              End: true          
            GetToken:
              Type: Task
              Next: RegisterScan
              Parameters:
                SecretId: !Ref ScannerProperties
              Resource: arn:aws:states:::aws-sdk:secretsmanager:getSecretValue
              ResultSelector:
                Secret.$: States.StringToJson($.SecretString)
              OutputPath: "$.Secret"
            RegisterScan:
              Type: Task
              TimeoutSeconds: 300
              Resource: arn:aws:states:::apigateway:invoke
              Parameters:
                ApiEndpoint: !Join ['.',[!Ref AGProxyApi, 'execute-api', !Ref AWS::Region, 'amazonaws.com']]
                Method: GET
                Headers:
                  QAuth.$: States.Array(States.Format('Bearer {}', $.QToken))
                Stage: v0
                Path: "/conn/snapshot/v1.0/register-scanner-run"
                AuthType: NO_AUTH
              Retry:
                - ErrorEquals:
                    - States.TaskFailed
                  BackoffRate: 1
                  IntervalSeconds: 300
                  MaxAttempts: 286
              Next: DeleteExistingResources
              ResultSelector:
                data.$: "$.ResponseBody"
              ResultPath: "$.scannerInfo"
            DeleteExistingResources:
              Type: Task
              Resource: arn:aws:states:::states:startExecution.sync:2
              Parameters:
                StateMachineArn: !Ref StaleCleanupSF
                Input:
                  EventId.$: "States.ArrayGetItem(States.StringSplit($$.Execution.Id, ':'), 7)"
                  StatePayload.$: "$"
                  AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$: "$$.Execution.Id"
              Next: GetLatestSnapshotDefinition
              ResultPath: null
            GetLatestSnapshotDefinition:
              Type: Task
              TimeoutSeconds: 300
              Resource: arn:aws:states:::apigateway:invoke
              Parameters:
                ApiEndpoint: !Join ['.',[!Ref AGProxyApi, 'execute-api', !Ref AWS::Region, 'amazonaws.com']]
                Method: GET
                Headers:
                  QAuth.$: States.Array(States.Format('Bearer {}', $.QToken))
                Stage: v0
                Path: "/qflow/snapshot/v2/qualys-snapshotting-sf-v2.json"
                AuthType: NO_AUTH
              Retry:
                - ErrorEquals:
                    - States.ALL
                  BackoffRate: 2
                  IntervalSeconds: 5
                  MaxAttempts: 10
              Next: UpdateStateMachine
              ResultPath: "$.SnapshotDefinition"
            UpdateStateMachine:
              Type: Task
              Parameters:
                StateMachineArn: !Ref SNAP
                Definition.$: "$.SnapshotDefinition.ResponseBody"
              Resource: arn:aws:states:::aws-sdk:sfn:updateStateMachine
              Next: GetAMIs
              ResultPath: "$.UpdateStateMachineResult"
            GetAMIs:
              Type: Task
              Resource: arn:aws:states:::apigateway:invoke
              TimeoutSeconds: 300
              Parameters:
                ApiEndpoint: !Join ['.',[!Ref AGProxyApi, 'execute-api', !Ref AWS::Region, 'amazonaws.com']]
                Method: GET
                Headers:
                  QAuth.$: States.Array(States.Format('Bearer {}', $.QToken))
                Stage: v0
                Path: "/qflow/snapshot/v2/qscanner-amis.json"
                AuthType: NO_AUTH
              Retry:
                - ErrorEquals:
                    - States.ALL
                  BackoffRate: 2
                  IntervalSeconds: 5
                  MaxAttempts: 10
                  Comment: Any other error type
              Next: GenerateRegionAccountCombination
              ResultSelector:
                data.$: "$.ResponseBody"
              ResultPath: "$.amis"
            GenerateRegionAccountCombination:
              Type: Task
              Resource: arn:aws:states:::lambda:invoke
              OutputPath: "$.Payload"
              Parameters:
                FunctionName: !Ref RegionAccountMultiplyLambda
                Payload:
                  regions.$: "$.Regions"
                  accounts.$: "$.scannerInfo.data.targetAccounts"
                  amiIds.$: "$.amis.data"
                  info:
                    tagKey.$: "$.TagKey"
                    tagValue.$: "$.TagValue"
                    AdditionalTagKey.$: "$.AdditionalTagKey"
                    AdditionalTagValue.$: "$.AdditionalTagValue"
                    qEndpoint.$: "$.QEndpoint"
                    qToken.$: "$.QToken"
              Retry:
                - ErrorEquals:
                    - Lambda.ServiceException
                    - Lambda.AWSLambdaException
                    - Lambda.SdkClientException
                    - Lambda.TooManyRequestsException
                  IntervalSeconds: 3
                  MaxAttempts: 60
                  BackoffRate: 1
                  Comment: Lambda limit - retry for 180s @3s interval
              Next: ForEachRegionXAccount
          TimeoutSeconds: 21600
      RoleArn: !GetAtt 'SFRole.Arn'
      StateMachineName: !Join ['',[!Ref AWS::StackName, '-qualys-cross-account-wrapper']]
      LoggingConfiguration:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt QssLogGroup.Arn
        IncludeExecutionData: true
        Level: ERROR
      Tags:
        - Key: App
          Value: !FindInMap [CustomVariables, qualys, qsstag]
  SSMSyncRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: ssm.amazonaws.com
          Action: sts:AssumeRole
        Version: '2012-10-17'
      RoleName: !Join [ "-", [ !Ref AWS::StackName, qualys-ssm-role ] ]
      Tags:
        - Key: App
          Value: !FindInMap [CustomVariables, qualys, qsstag]
      Policies:
      - PolicyName: qualys-sync-run-shell-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: ssm:DescribeInstanceInformation
            Resource: "*"
          - Effect: Allow
            Action: ssm:SendCommand
            Resource:
            - Fn::Sub: 'arn:aws:ec2:*:${AWS::AccountId}:instance/*'
            - Fn::Sub: 'arn:aws:ssm:*::document/AWS-RunShellScript'
          - Effect: Allow
            Action:
            - ssm:ListCommands
            - ssm:ListCommandInvocations
            Resource:
            - Fn::Sub: 'arn:aws:ssm:*:${AWS::AccountId}:*'
          - Effect: Allow
            Action:
            - states:SendTaskFailure
            - states:SendTaskSuccess
            Resource:
              Fn::Sub: arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:*
  StackSetAdministrationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: cloudformation.amazonaws.com
          Action: sts:AssumeRole
        Version: '2012-10-17'
      RoleName: !Join [ "-", [ !Ref AWS::StackName, QualysStackSetAdministrationRole ] ]
      Policies:
      - PolicyName: qualys-assume-execution-role-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Resource: !Join [ "" , [ !Sub 'arn:aws:iam::${AWS::AccountId}:role/', !Join [ "-", [ !Ref AWS::StackName, QualysStackSetExecutionRole ] ] ] ]
  StackSetExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            AWS: !GetAtt 'StackSetAdministrationRole.Arn'
          Action: sts:AssumeRole
        Version: '2012-10-17'
      RoleName: !Join [ "-", [ !Ref AWS::StackName, QualysStackSetExecutionRole ] ]
      Policies:
      - PolicyName: qualys-stack-execution-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - ec2:DescribeRouteTables
              - ec2:DescribeInternetGateways
              - ec2:DescribeSubnets
              - ec2:DescribeAvailabilityZones
              - ec2:DescribeAccountAttributes
              - ec2:DescribeSecurityGroups
              - ec2:DescribeVpcs
              - ec2:CreateRoute
              - ec2:CreateTags
              - ec2:CreateSubnet
              - ec2:CreateRouteTable
              - ec2:CreateSecurityGroup
              - ec2:CreateVpc
              - ec2:CreateInternetGateway
              - ec2:AttachInternetGateway
              - ec2:AssociateRouteTable
              - ec2:ModifySubnetAttribute
              - ec2:ModifyVpcAttribute
              - ec2:AuthorizeSecurityGroupEgress
              - ec2:RevokeSecurityGroupEgress
            Resource: "*"
          - Effect: Allow
            Action:
              - ec2:DisassociateRouteTable
              - ec2:DetachInternetGateway
              - ec2:DeleteVpc
              - ec2:DeleteSubnet
              - ec2:DeleteInternetGateway
              - ec2:DeleteRouteTable
              - ec2:DeleteRoute
              - ec2:DeleteSecurityGroup
            Resource: "*"
            Condition:
              StringEquals:
                'aws:ResourceTag/App': !FindInMap [CustomVariables, qualys, qsstag]
          - Effect: Allow
            Action:
              - ssm:DescribeParameters
              - ssm:GetParameters
              - ssm:GetDocument
              - ssm:ListTagsForResource
              - ssm:PutParameter
              - ssm:CreateDocument
              - ssm:AddTagsToResource
              - ssm:ListDocuments
            Resource: "*"
          - Effect: Allow
            Action:
              - ssm:DeleteParameter
              - ssm:DeleteDocument
            Resource: "*"
            Condition:
              StringEquals:
                'aws:ResourceTag/App': !FindInMap [CustomVariables, qualys, qsstag]
          - Effect: Allow
            Action:
              - cloudformation:*
            Resource: "*"
          - Effect: Allow
            Action:
              - iam:PassRole
            Resource: !GetAtt 'SSMSyncRole.Arn'
          - Effect: Allow
            Action:
              - kms:Describe*
              - kms:List*
              - kms:CreateKey
              - kms:CreateAlias
              - kms:EnableKey
              - kms:TagResource
              - kms:PutKeyPolicy
            Resource: "*"
          - Effect: Allow
            Action:
              - kms:DeleteAlias
            Resource: !Sub 'arn:aws:kms:*:${AWS::AccountId}:alias/qualys-snapshot-key'
  CrossRegionStacks:
    Type: 'AWS::CloudFormation::StackSet'
    Properties:
      StackSetName: !Join [ "-", [ !Ref AWS::StackName, cross-region-vpc ] ]
      Description: deploys vpc across multiple region
      PermissionModel: SELF_MANAGED
      AdministrationRoleARN: !GetAtt 'StackSetAdministrationRole.Arn'
      ExecutionRoleName: !Ref StackSetExecutionRole
      StackInstancesGroup:
        - DeploymentTargets:
            Accounts:
              - !Ref "AWS::AccountId"
          Regions: !Ref Regions
      Parameters:
        - ParameterKey: VpcCidr
          ParameterValue: !Ref VpcCidr
        - ParameterKey: SubnetCidr
          ParameterValue: !Ref SubnetCidr
        - ParameterKey: SSMSyncRoleArn
          ParameterValue: !GetAtt 'SSMSyncRole.Arn'
        - ParameterKey: StackSetExecutionRoleArn
          ParameterValue: !GetAtt 'StackSetExecutionRole.Arn'
        - ParameterKey: StackSetAdministrationRoleArn
          ParameterValue: !GetAtt 'StackSetAdministrationRole.Arn'
        - ParameterKey: QSSTag
          ParameterValue: !FindInMap [ CustomVariables, qualys, qsstag ]
      Tags:
        - Key: App
          Value: !FindInMap [CustomVariables, qualys, qsstag]
      TemplateBody: |
        {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Parameters": {
            "VpcCidr": {
              "Description": "optional vpc cidr",
              "Type": "String"
            },
            "SubnetCidr": {
              "Description": "optional vpc cidr",
              "Type": "String"
            },
            "SSMSyncRoleArn": {
              "Description": "role arn for ssm document",
              "Type": "String"
            },
            "StackSetExecutionRoleArn": {
              "Description": "role arn for stack set execution",
              "Type": "String"
            },
            "StackSetAdministrationRoleArn": {
              "Description": "role arn for stack set execution",
              "Type": "String"
            },
            "QSSTag": {
              "Description": "tag used for qualys resources",
              "Type": "String"
            }
          },
          "Resources": {
            "PublicVpc": {
              "Type": "AWS::EC2::VPC",
              "Properties": {
                "CidrBlock": {
                  "Ref": "VpcCidr"
                },
                "Tags": [
                  {
                    "Key": "App",
                    "Value": {
                      "Ref": "QSSTag"
                    }
                  }
                ]
              }
            },
            "PublicSubnet": {
              "Type": "AWS::EC2::Subnet",
              "Properties": {
                "VpcId": {
                  "Ref": "PublicVpc"
                },
                "AvailabilityZone": {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::GetAZs": ""
                    }
                  ]
                },
                "CidrBlock": {
                  "Ref": "SubnetCidr"
                },
                "MapPublicIpOnLaunch": true,
                "Tags": [
                  {
                    "Key": "App",
                    "Value": {
                      "Ref": "QSSTag"
                    }
                  }
                ]
              }
            },
            "InternetGateway": {
              "Type": "AWS::EC2::InternetGateway",
              "Properties": {
                "Tags": [
                  {
                    "Key": "App",
                    "Value": {
                      "Ref": "QSSTag"
                    }
                  }
                ]
              }
            },
            "GatewayToInternet": {
              "Type": "AWS::EC2::VPCGatewayAttachment",
              "Properties": {
                "VpcId": {
                  "Ref": "PublicVpc"
                },
                "InternetGatewayId": {
                  "Ref": "InternetGateway"
                }
              }
            },
            "PublicRouteTable": {
              "Type": "AWS::EC2::RouteTable",
              "Properties": {
                "VpcId": {
                  "Ref": "PublicVpc"
                },
                "Tags": [
                  {
                    "Key": "App",
                    "Value": {
                      "Ref": "QSSTag"
                    }
                  }
                ]
              }
            },
            "PublicRoute": {
              "Type": "AWS::EC2::Route",
              "DependsOn": "GatewayToInternet",
              "Properties": {
                "RouteTableId": {
                  "Ref": "PublicRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                  "Ref": "InternetGateway"
                }
              }
            },
            "PublicSubnetRouteTableAssociation": {
              "Type": "AWS::EC2::SubnetRouteTableAssociation",
              "Properties": {
                "SubnetId": {
                  "Ref": "PublicSubnet"
                },
                "RouteTableId": {
                  "Ref": "PublicRouteTable"
                }
              }
            },
            "ScannerSecurityGroup": {
              "Type": "AWS::EC2::SecurityGroup",
              "Properties": {
                "GroupName": "qualys-snapshot-scanner-sg",
                "GroupDescription": "Security group for scanner Instance",
                "VpcId": {
                  "Ref": "PublicVpc"
                },
                "SecurityGroupEgress": [
                  {
                    "IpProtocol": "-1",
                    "CidrIp": "0.0.0.0/0"
                  }
                ],
                "Tags": [
                  {
                    "Key": "App",
                    "Value": {
                      "Ref": "QSSTag"
                    }
                  }
                ]
              }
            },
            "BasicParameter": {
              "Type": "AWS::SSM::Parameter",
              "Properties": {
                "Name": "qualys-snapshot-scanner-config",
                "Type": "String",
                "Value": {
                  "Fn::Sub": [
                    "{\"sgId\":\"${sgId}\",\"subnetId\":\"${subnetId}\",\"az\":\"${az}\", \"EKeyId\": \"${keyId}\"}",
                    {
                      "sgId": {
                        "Ref": "ScannerSecurityGroup"
                      },
                      "subnetId": {
                        "Ref": "PublicSubnet"
                      },
                      "az": {
                        "Fn::Select": [
                          0,
                          {
                            "Fn::GetAZs": ""
                          }
                        ]
                      },
                      "keyId": {
                        "Ref": "SnapshotKMSKey"
                      }
                    }
                  ]
                },
                "Description": "Stores sg and subnet Id to be used for Ec2 RunInstance",
                "Tags": {
                  "App": {
                    "Ref": "QSSTag"
                  }
                }
              }
            },
            "StepFnRunCommand": {
              "Type": "AWS::SSM::Document",
              "Properties": {
                "Content": {
                  "description": "This automation document implements an AWS-RunShellScript execution for a step functions waitForCallBack integration pattern",
                  "schemaVersion": "0.3",
                  "assumeRole": {
                    "Ref": "SSMSyncRoleArn"
                  },
                  "parameters": {
                    "InstanceIds": {
                      "type": "StringList",
                      "description": "(Required) The IDs of the instances where you want to run the command."
                    },
                    "sourceRegion": {
                      "type": "String",
                      "description": "(Required) Step Function region."
                    },
                    "taskToken": {
                      "type": "String",
                      "description": "(Required) Step Function task token for callback response."
                    },
                    "Commands": {
                      "type": "StringList",
                      "description": "(Required) Specify a shell script or a command to run."
                    },
                    "workingDirectory": {
                      "type": "String",
                      "default": "\"\"",
                      "description": "(Optional) The path to the working directory on your instance."
                    },
                    "executionTimeout": {
                      "type": "String",
                      "description": "\"(Optional) The time in seconds for a command to complete\nbefore it is considered to have failed. Default is 3600 (1 hour). Maximum\nis 172800 (48 hours).\"\n",
                      "default": "3600"
                    }
                  },
                  "mainSteps": [
                    {
                      "name": "RunCommand",
                      "action": "aws:runCommand",
                      "inputs": {
                        "DocumentName": "AWS-RunShellScript",
                        "Parameters": {
                          "commands": "{{Commands}}",
                          "workingDirectory": "{{workingDirectory}}",
                          "executionTimeout": "{{executionTimeout}}"
                        },
                        "InstanceIds": "{{InstanceIds}}"
                      },
                      "nextStep": "SendTaskSuccess",
                      "onFailure": "step:SendTaskFailure",
                      "onCancel": "step:SendTaskFailure"
                    },
                    {
                      "name": "SendTaskSuccess",
                      "action": "aws:executeScript",
                      "timeoutSeconds": 45,
                      "inputs": {
                        "Runtime": "python3.6",
                        "Handler": "crossRegionSendTaskSuccess",
                        "InputPayload": {
                          "region": "{{ sourceRegion }}",
                          "taskToken": "{{ taskToken }}",
                          "output": "{ \"commandId\": \"{{ RunCommand.CommandId }}\"}"
                        },
                        "Script": "def crossRegionSendTaskSuccess(events,context):\n  import boto3\n  sfn = boto3.client('stepfunctions', region_name=events['region'])\n  sfn.send_task_success(\n    taskToken=events['taskToken'],\n    output=events['output']\n  )"
                      }
                    },
                    {
                      "name": "SendTaskFailure",
                      "action": "aws:executeScript",
                      "timeoutSeconds": 45,
                      "inputs": {
                        "Runtime": "python3.6",
                        "Handler": "crossRegionSendTaskFailure",
                        "InputPayload": {
                          "region": "{{ sourceRegion }}",
                          "taskToken": "{{ taskToken }}",
                          "error": "Automation document failure",
                          "cause": "RunCommand failed, check command execution id {{RunCommand.CommandId}} for more details"
                        },
                        "Script": "def crossRegionSendTaskFailure(events,context):\n  import boto3\n  sfn = boto3.client('stepfunctions', region_name=events['region'])\n  sfn.send_task_failure(\n    taskToken=events['taskToken'],\n    error=events['error'],\n    cause=events['cause']\n  )"
                      }
                    }
                  ]
                },
                "Name": "QualysSfnRunCommandByInstanceIds",
                "DocumentType": "Automation",
                "TargetType": "/AWS::EC2::Host",
                "Tags": [
                  {
                    "Key": "App",
                    "Value": {
                      "Ref": "QSSTag"
                    }
                  }
                ]
              }
            },
            "SnapshotKMSKey": {
              "Type": "AWS::KMS::Key",
              "Properties": {
                "Description": "Symmetric CMK for Qualys Snapshot",
                "KeyUsage": "ENCRYPT_DECRYPT",
                "Enabled": true,
                "KeyPolicy": {
                  "Version": "2012-10-17",
                  "Id": "key-default-1",
                  "Statement": [
                    {
                      "Sid": "Enable IAM User Permissions",
                      "Effect": "Allow",
                      "Principal": {
                        "AWS": {
                          "Fn::Sub": [
                            "arn:aws:iam::${accountId}:root",
                            {
                              "accountId": {
                                "Ref": "AWS::AccountId"
                              }
                            }
                          ]
                        }
                      },
                      "Action": "kms:*",
                      "Resource": "*"
                    },
                    {
                      "Sid": "Enable Cloudformation execution role all access to this key",
                      "Effect": "Allow",
                      "Principal": {
                        "AWS": {
                          "Ref": "StackSetExecutionRoleArn"
                        }
                      },
                      "Action": "kms:*",
                      "Resource": "*"
                    }
                  ]
                },
                "Tags": [
                  {
                    "Key": "App",
                    "Value": {
                      "Ref": "QSSTag"
                    }
                  }
                ]
              }
            },
            "SnapshotKMSKeyAlias": {
              "Type": "AWS::KMS::Alias",
              "Properties": {
                "AliasName": "alias/qualys-snapshot-key",
                "TargetKeyId": {
                  "Ref": "SnapshotKMSKey"
                }
              }
            }
          }
        }
  ScannerProperties:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: QualysScannerProperties
      Description: stores qualys secrets
      SecretString:
        Fn::ToJsonString:
          QToken: !Ref QToken
          QEndpoint: !Ref QEndpoint
          IntervalHours: !Ref IntervalHours
          Regions: !Ref Regions
          TagKey: !Ref TagKey
          TagValue: !Ref TagValue
          AdditionalTagKey: !If [ IsAdditionalTagEmpty, !Ref TagKey, !Ref AdditionalTagKey ]
          AdditionalTagValue: !If [ IsAdditionalTagEmpty, !Ref TagValue, !Ref AdditionalTagValue ]
      Tags:
        - Key: App
          Value: !FindInMap [CustomVariables, qualys, qsstag]
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ "-", [ !Ref AWS::StackName, qualys-lambda-role ] ]
      Description: An execution role for a Lambda function
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action:
          - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: qualys-sqs-listen
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ChangeMessageVisibility
                Resource: !GetAtt SSMWrapperQueue.Arn
      Tags:
        - Key: App
          Value: !FindInMap [CustomVariables, qualys, qsstag]
  LambdaInlinePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Join [ "-", [ !Ref AWS::StackName, qualys-lambda-policy ] ]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 'logs:CreateLogStream'
            Resource: !Sub 'arn:aws:logs:*:${AWS::AccountId}:log-group:*'
          - Effect: Allow
            Action: 'logs:PutLogEvents'
            Resource: !Sub 'arn:aws:logs:*:${AWS::AccountId}:log-group:*:log-stream:*'
          - Effect: Allow
            Action: 'sts:AssumeRole'
            Resource: !Sub 'arn:aws:iam::*:role/qualys-snapshot-scanner-cross-account'
          - Effect: Allow
            Action: 'ssm:GetParameter'
            Resource: !Sub 'arn:aws:ssm:*:${AWS::AccountId}:parameter/qualys-snapshot-scanner-config'
          - Effect: Allow
            Action: 'ssm:GetCommandInvocation'
            Resource: '*'
          - Effect: Allow
            Action: ssm:StartAutomationExecution
            Resource: !Sub 'arn:aws:ssm:*:${AWS::AccountId}:automation-definition/QualysSfnRunCommandByInstanceIds:$DEFAULT'
          - Effect: Allow
            Action:
              - ec2:DescribeInstances
              - ec2:CreateTags
              - ec2:DescribeVolumes
              - ec2:DescribeSnapshots
              - states:ListExecutions
            Resource: '*'
          - Effect: Allow
            Action:
              - ec2:RunInstances
              - ec2:CreateVolume
            Resource:
              - 'arn:aws:ec2:*::image/*'
              - !Sub 'arn:aws:ec2:*:${AWS::AccountId}:instance/*'
              - !Sub 'arn:aws:ec2:*:${AWS::AccountId}:network-interface/*'
              - !Sub 'arn:aws:ec2:*:${AWS::AccountId}:volume/*'
              - !Sub 'arn:aws:ec2:*:${AWS::AccountId}:subnet/*'
              - !Sub 'arn:aws:ec2:*:${AWS::AccountId}:security-group/*'
              - !Sub 'arn:aws:ec2:*:${AWS::AccountId}:key-pair/*'
          - Effect: Allow
            Action:
              - ec2:TerminateInstances
              - ec2:CreateVolume
              - ec2:AttachVolume
              - ec2:DetachVolume
              - ec2:DeleteVolume
              - ec2:DeleteSnapshot
            Resource:
              - !Sub 'arn:aws:ec2:*:${AWS::AccountId}:instance/*'
              - !Sub 'arn:aws:ec2:*:${AWS::AccountId}:volume/*'
              - !Sub 'arn:aws:ec2:*::snapshot/*'
            Condition:
              StringEquals:
                'aws:ResourceTag/App': !FindInMap [CustomVariables, qualys, qsstag]
          - Effect: Allow
            Action: iam:PassRole
            Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:role/QualysSnapshotScannerSSMRole'
          - Effect: Allow
            Action:
              - kms:Decrypt
              - kms:Encrypt
              - kms:DescribeKey
              - kms:RetireGrant
              - kms:CreateGrant
              - kms:ListGrants
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
            Resource: "*"
      Roles:
        - !Ref LambdaRole
  QssLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['',['/qualys/', !Ref AWS::StackName, '-qss']]
      RetentionInDays: 30
      Tags:
        - Key: App
          Value: !FindInMap [CustomVariables, qualys, qsstag]
  SDKWrapperLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: 'qualys-util-aws-sdk-wrapper'
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs16.x
      Role: !GetAtt 'LambdaRole.Arn'
      Timeout: 180
      Tags:
        - Key: App
          Value: !FindInMap [CustomVariables, qualys, qsstag]
      Code:
        ZipFile: |
          const AWS = require('aws-sdk')
          exports.handler = async (event) => {
              if(event['Records']) {
                event = JSON.parse(event['Records'][0].body);
                await new Promise(res => setTimeout(res, 300));  // artifical delay to control rate 
              }
              const { roleArn, region, service, method, params = {} } = event;
              const config = { region };
              if (roleArn) {
                  const { Credentials: { AccessKeyId, SecretAccessKey, SessionToken } }
                      = await (new AWS.STS(config)).assumeRole({
                          RoleArn: roleArn,
                          RoleSessionName: "qualys-snapshot-scanner"
                      }).promise();
                  config.credentials = new AWS.Credentials({
                      accessKeyId: AccessKeyId,
                      secretAccessKey: SecretAccessKey,
                      sessionToken: SessionToken
                  });
              }
              const svc = new AWS[service](config);
              return svc[method](params).promise();
          }
  LambdaFunctionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !GetAtt SSMWrapperQueue.Arn
      FunctionName: !GetAtt SDKWrapperLambda.Arn
      ScalingConfig:
        MaximumConcurrency: 10
  RegionAccountMultiplyLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: 'qualys-util-region-x-account'
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs16.x
      Role: !GetAtt 'LambdaRole.Arn'
      Timeout: 60
      Tags:
        - Key: App
          Value: !FindInMap [CustomVariables, qualys, qsstag]
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            const {accounts, regions, amiIds, info} = event;
            const res = [];
            for(const a of accounts){
                for (const r of regions) {
                    res.push({account: a.awsAccountId, region: r, ami: amiIds[r], ...info})
                }
            }
            return res;
          };
  ArrayMerge:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: 'qualys-util-array-merge'
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs16.x
      Role: !GetAtt 'LambdaRole.Arn'
      Timeout: 60
      Tags:
        - Key: App
          Value: !FindInMap [CustomVariables, qualys, qsstag]
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            const {array, props, filterErrors} = event;
            var farray = array;
            if (filterErrors)
              farray = array.filter(a => !('filteredError' in a));
            return farray.map(s => ({...s, ...props}));
          };
  FilterMarketplaceAmiLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: 'qualys-util-filter-aws-marketplace'
      Handler: index.handler
      MemorySize: 256
      Runtime: python3.9
      Role: !GetAtt 'LambdaRole.Arn'
      Timeout: 60
      Tags:
        - Key: App
          Value: !FindInMap [CustomVariables, qualys, qsstag]
      Code:
        ZipFile: |
          import json

          def handler(event, context):
            payload = event.get('payload')
            reservations = [r for r in payload["Reservations"] if [i for i in r['Instances'] if not is_marketplace(i) and not is_windows(i)]]
            return {'Reservations': reservations, 'NextToken': payload.get("NextToken")}

          def is_windows(instance):
            return instance['PlatformDetails'] == 'Windows'

          def is_marketplace(instance):
            return [i for i in instance['ProductCodes'] if i['ProductCodeType'] == 'marketplace']
  AGProxyApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Join ['',[!Ref AWS::StackName, '-sf-integration-proxy']]
      Tags:
        - Key: App
          Value: !FindInMap [CustomVariables, qualys, qsstag]
  AGProxyApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt AGProxyApi.RootResourceId
      RestApiId: !Ref AGProxyApi
      PathPart: '{proxy+}'
  AGProxyProxyMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: ANY
      ResourceId: !Ref AGProxyApiResource
      RestApiId: !Ref AGProxyApi
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.proxy: true
        method.request.header.QAuth: true
      Integration:
        CacheKeyParameters:
          - 'method.request.path.proxy'
        RequestParameters:
          integration.request.path.proxy: 'method.request.path.proxy'
          integration.request.header.Authorization: 'method.request.header.QAuth'
        IntegrationHttpMethod: ANY
        Type: HTTP_PROXY
        Uri: !Join ['',[!Ref QEndpoint, '/{proxy}']]
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: 200
  AGProxyDeployment:
    DependsOn:
      - AGProxyProxyMethod
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref AGProxyApi
      StageName: 'v0'
  SFRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ "-", [ !Ref AWS::StackName, qualys-sf-role ] ]
      Description: An execution role for a step function
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: states.amazonaws.com
          Action:
          - 'sts:AssumeRole'
      Tags:
        - Key: App
          Value: !FindInMap [CustomVariables, qualys, qsstag]
      Policies:
        - PolicyName: qualys-sfn-sync-invoke
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogDelivery
                  - logs:GetLogDelivery
                  - logs:UpdateLogDelivery
                  - logs:DeleteLogDelivery
                  - logs:ListLogDeliveries
                  - logs:PutResourcePolicy
                  - logs:DescribeResourcePolicies
                  - logs:DescribeLogGroups
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'states:DescribeExecution'
                  - 'states:StopExecution'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'events:PutTargets'
                  - 'events:PutRule'
                  - 'events:DescribeRule'
                Resource: !Sub 'arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForStepFunctionsExecutionRule'
  SFInlinePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Join [ "-", [ !Ref AWS::StackName, qualys-sf-policy ] ]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 'iam:PassRole'
            Resource: '*'
            Condition:
              StringEquals:
                'aws:ResourceTag/App': !FindInMap [CustomVariables, qualys, qsstag]
          - Effect: Allow
            Action: 's3:GetObject'
            Resource: 'arn:aws:s3:::bh-qualys-snapshot-scanner-data/*'
            Condition:
              StringEquals:
                's3:ExistingObjectTag/App': !FindInMap [CustomVariables, qualys, qsstag]
          - Effect: Allow
            Action: 'secretsmanager:GetSecretValue'
            Resource: !Ref ScannerProperties
          - Effect: Allow
            Action: 'states:UpdateStateMachine'
            Resource: !Ref SNAP
          - Effect: Allow
            Action:
              - 'events:EnableRule'
              - 'events:DisableRule'
            Resource: !GetAtt 'SNAPRule.Arn'
          - Effect: Allow
            Action:
              - 'events:EnableRule'
              - 'events:DisableRule'
            Resource: !GetAtt 'SFRule.Arn'
          - Effect: Allow
            Action:
              - 'lambda:InvokeFunction'
            Resource:
              - !GetAtt 'SDKWrapperLambda.Arn'
              - !GetAtt 'RegionAccountMultiplyLambda.Arn'
              - !GetAtt 'ArrayMerge.Arn'
              - !GetAtt 'FilterMarketplaceAmiLambda.Arn'
          - Effect: Allow
            Action:
              - 'states:StartExecution'
              - 'states:StartSyncExecution'
            Resource:
              - !Ref SNAP
              - !Ref InstancePaginated
              - !Ref CrossAccountWrapper
              - !Ref AWSSDKWrapperSF
              - !Ref AWSSSMWrapperSF
              - !Ref StaleCleanupSF
              - !Ref CreateSnapshotSF
              - !Ref CopySnapshotSF
          - Effect: Allow
            Action: 'ssm:StartAutomationExecution'
            Resource: '*'
            Condition:
              StringEquals:
                'aws:ResourceTag/App': !FindInMap [CustomVariables, qualys, qsstag]
          - Effect: Allow
            Action: 'sqs:SendMessage'
            Resource: !GetAtt 'SSMWrapperQueue.Arn'
      Roles:
        - !Ref SFRole
  SF:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Join ['',[!Ref AWS::StackName, '-qualys-register-service-account']]
      LoggingConfiguration:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt QssLogGroup.Arn
        IncludeExecutionData: true
        Level: ERROR
      Tags:
        - Key: App
          Value: !FindInMap [CustomVariables, qualys, qsstag]
      DefinitionString:
        Fn::ToJsonString:
          Comment: Register this account with Qualys
          StartAt: GetToken
          States:
            GetToken:
              Type: Task
              Next: ServiceAccountRegistration
              Parameters:
                SecretId: !Ref ScannerProperties
              Resource: arn:aws:states:::aws-sdk:secretsmanager:getSecretValue
              Comment: Get user details stored in secret manager
              OutputPath: "$.Secret"
              ResultSelector:
                Secret.$: States.StringToJson($.SecretString)
            ServiceAccountRegistration:
              Type: Task
              TimeoutSeconds: 300
              Resource: arn:aws:states:::apigateway:invoke
              Parameters:
                ApiEndpoint: !Join ['.',[!Ref AGProxyApi, 'execute-api', !Ref AWS::Region, 'amazonaws.com']]
                Method: POST
                Headers:
                  Content-Type:
                  - application/json
                  QAuth.$: States.Array(States.Format('Bearer {}', $.QToken))
                Stage: v0
                Path: "/conn/snapshot/v1.0/register-service-account"
                RequestBody: {
                  "accountId": "${AWS::AccountId}",
                  "schedule": "0 * * ? * * *",
                  "tags": [
                    {
                      "tagKey" : "QUALYS_SNAPSHOT_ENABLED",
                      "tagValue" : "true"
                    }
                  ]
                }
                AuthType: NO_AUTH
              OutputPath: "$.ResponseBody"
              Retry:
                - ErrorEquals:
                    - States.ALL
                  BackoffRate: 1
                  IntervalSeconds: 300
                  MaxAttempts: 60
              Next: EnableCrossAccountRule
            EnableCrossAccountRule:
              Type: Task
              Parameters:
                Name: !Ref SNAPRule
              Resource: arn:aws:states:::aws-sdk:eventbridge:enableRule
              Next: TriggerCrossAccountWrapper
            TriggerCrossAccountWrapper:
              Type: Task
              Resource: arn:aws:states:::states:startExecution.sync:2
              Parameters:
                StateMachineArn: !Ref CrossAccountWrapper
                Input:
                  AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$: "$$.Execution.Id"
              End: true
              Catch:
                - ErrorEquals:
                  - "States.ALL"
                  Next: CatchError
            CatchError:
              Type: Pass
              End: true
      RoleArn: !GetAtt 'SFRole.Arn'
  DeregisterSF:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Join ['',[!Ref AWS::StackName, '-qualys-deregister-service-account']]
      LoggingConfiguration:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt QssLogGroup.Arn
        IncludeExecutionData: true
        Level: ERROR
      Tags:
        - Key: App
          Value: !FindInMap [CustomVariables, qualys, qsstag]
      DefinitionString:
        Fn::ToJsonString:
          Comment: Register this account with Qualys
          StartAt: GetToken
          States:
            GetToken:
              Type: Task
              Next: ServiceAccountDeregistration
              Parameters:
                SecretId: !Ref ScannerProperties
              Resource: arn:aws:states:::aws-sdk:secretsmanager:getSecretValue
              Comment: Get user details stored in secret manager
              OutputPath: "$.Secret"
              ResultSelector:
                Secret.$: States.StringToJson($.SecretString)
            ServiceAccountDeregistration:
              Type: Task
              Resource: arn:aws:states:::apigateway:invoke
              Parameters:
                ApiEndpoint: !Join ['.',[!Ref AGProxyApi, 'execute-api', !Ref AWS::Region, 'amazonaws.com']]
                Method: DELETE
                Headers:
                  Content-Type:
                  - application/json
                  QAuth.$: States.Array(States.Format('Bearer {}', $.QToken))
                Stage: v0
                Path: "/conn/snapshot/v1.0/deregister-service-account"
                AuthType: NO_AUTH
              ResultPath: $.ServiceRegistration
              Next: DisableCrossAccountRule
            DisableCrossAccountRule:
              Type: Task
              End: true
              Parameters:
                Name: !Ref SNAPRule
              Resource: arn:aws:states:::aws-sdk:eventbridge:disableRule
      RoleArn: !GetAtt 'SFRole.Arn'
  InstancePaginated:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Join ['',[!Ref AWS::StackName, '-qualys-pagination-wrapper']]
      LoggingConfiguration:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt QssLogGroup.Arn
        IncludeExecutionData: true
        Level: ERROR
      Tags:
        - Key: App
          Value: !FindInMap [CustomVariables, qualys, qsstag]
      DefinitionString:
        Fn::ToJsonString:
          Comment: Qualys Snapshot Scanner - Pagination Wrapper
          StartAt: FormatInput
          States:
            FormatInput:
              Type: Pass
              Next: GenerateEC2Parameters
              OutputPath: "$.StatePayload"
            GenerateEC2Parameters:
              Type: Pass
              Next: GenerateEC2NextToken
              ResultPath: "$.ec2Params"
              Parameters:
                MaxResults:
                  Fn::Select:
                    - !Ref SingleRegionConcurrency
                    - [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
                Filters:
                - Name: "instance-state-name"
                  Values: ["running", "stopped"]
                - Name.$: States.Format('tag:{}', $.tagKey)
                  Values.$: "$.tagValue"
                - Name.$: States.Format('tag:{}', $.AdditionalTagKey)
                  Values.$: "$.AdditionalTagValue"
            GenerateEC2NextToken:
              Type: Pass
              Next: DescribeTGInstances
              Result: {}
              ResultPath: "$.ec2NextToken"
            DescribeTGInstances:
              Type: Task
              Resource: arn:aws:states:::states:startExecution.sync:2
              Parameters:
                StateMachineArn: !Ref AWSSDKWrapperSF
                Input:
                  EventId.$: "$$.Execution.Input.EventId"
                  AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$: "$$.Execution.Id"
                  service: EC2
                  method: describeInstances
                  region.$: "$.region"
                  roleArn.$: States.Format('arn:aws:iam::{}:role/qualys-snapshot-scanner-cross-account', $.account)
                  params.$: States.JsonMerge($.ec2Params, $.ec2NextToken, false)
              ResultSelector:
                Payload.$: "$.Output"
                InstancesCount.$: States.ArrayLength($.Output.Reservations..Instances[*])
              ResultPath: "$.CustomerInstances"
              Next: FilterMarketplace
            FilterMarketplace:
              Type: Task
              Resource: arn:aws:states:::lambda:invoke
              Parameters:
                FunctionName: qualys-util-filter-aws-marketplace
                Payload:
                  payload.$: "$.CustomerInstances.Payload"
              ResultSelector:
                Reservations.$: "$.Payload.Reservations"
                NextToken.$: "$.Payload.NextToken"
                InstancesCount.$: States.ArrayLength($.Payload[*])
              ResultPath: "$.CustomerInstances.Payload"
              Retry:
              - ErrorEquals:
                - Lambda.ServiceException
                - Lambda.AWSLambdaException
                - Lambda.SdkClientException
                - Lambda.TooManyRequestsException
                IntervalSeconds: 3
                MaxAttempts: 60
                BackoffRate: 1
                Comment: Lambda limit - retry for 180s @3s interval
              Next: CheckInstanceCount
            NextTokenExists:
              Type: Choice
              Choices:
              - And:
                - Variable: "$.CustomerInstances.Payload.NextToken"
                  IsPresent: true
                - Variable: "$.CustomerInstances.Payload.NextToken"
                  IsString: true
                Next: MergeNextToken
                Comment: 'Yes'
              Default: Success
            MergeNextToken:
              Type: Pass
              Next: DescribeTGInstances
              Parameters:
                NextToken.$: "$.CustomerInstances.Payload.NextToken"
              ResultPath: "$.ec2NextToken"
            CheckInstanceCount:
              Type: Choice
              Choices:
              - Variable: "$.CustomerInstances.InstancesCount"
                NumericGreaterThan: 0
                Next: MergeInstanceData
                Comment: count > 0
              Default: NextTokenExists
            MergeInstanceData:
              Type: Task
              Resource: arn:aws:states:::lambda:invoke
              Parameters:
                FunctionName: qualys-util-array-merge
                Payload:
                  array.$: "$.CustomerInstances.Payload.Reservations..Instances[*]"
                  props:
                    scannerInstanceVpcConfig.$: "$.scannerInstance.vpcConfig"
                    scannerInstanceAmi.$: "$.ami"
                    targetRegion.$: "$.region"
                    targetAccount.$: "$.account"
                    scannerAccount: !Ref 'AWS::AccountId'
              ResultPath: "$.CustomerInstances.Payload.Reservations"
              Retry:
              - ErrorEquals:
                - Lambda.ServiceException
                - Lambda.AWSLambdaException
                - Lambda.SdkClientException
                - Lambda.TooManyRequestsException
                IntervalSeconds: 3
                MaxAttempts: 60
                BackoffRate: 1
                Comment: Lambda limit - retry for 180s @3s interval
              Next: CreateBatches
              ResultSelector:
                Instances.$: "$.Payload"
            CreateBatches:
              Type: Pass
              Next: Map
              Parameters:
                Instances.$: States.ArrayPartition($.CustomerInstances.Payload.Reservations.Instances, 10)
              ResultPath: "$.CustomerInstances.Payload.Reservations"
            Map:
              Type: Map
              ResultPath:
              ItemProcessor:
                ProcessorConfig:
                  Mode: INLINE
                StartAt: ScanInstance
                States:
                  ScanInstance:
                    Type: Task
                    Resource: arn:aws:states:::states:startExecution.sync:2
                    Parameters:
                      StateMachineArn: !Ref SNAP
                      Input:
                        EventId.$: "$$.Execution.Input.EventId"
                        AWSSDKWrapperSF: !Ref AWSSDKWrapperSF
                        AWSSSMWrapperSF: !Ref AWSSSMWrapperSF
                        CreateSnapshotSF: !Ref CreateSnapshotSF
                        CopySnapshotSF: !Ref CopySnapshotSF
                        CustomerInstances.$: "$.Instances"
                        Config.$: "$$.Execution.Input.StatePayload"
                        AWSApiEndpoint: !Join [ '.',[ !Ref AGProxyApi, 'execute-api', !Ref AWS::Region, 'amazonaws.com' ] ]
                        QEndpoint.$: "$.QEndpoint"
                        QToken.$: "$.QToken"
                        ScannerRegion: !Ref AWS::Region
                        AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$: "$$.Execution.Id"
                    ResultPath:
                    Catch:
                    - ErrorEquals:
                      - States.ALL
                      ResultPath: "$.error"
                      Next: Continue
                    End: true
                  Continue:
                    Type: Succeed
              Next: NextTokenExists
              MaxConcurrency:
                Fn::Select:
                  - !Ref SingleRegionConcurrency
                  - [1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
              ItemsPath: "$.CustomerInstances.Payload.Reservations.Instances"
              ItemSelector:
                Instances.$: "$$.Map.Item.Value"
                QEndpoint.$: "$.qEndpoint"
                QToken.$: "$.qToken"
            Success:
              Type: Succeed
          TimeoutSeconds: 21600
      RoleArn: !GetAtt 'SFRole.Arn'
  SNAP:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Join ['',[!Ref AWS::StackName, '-qualys-snapshot-orchestrator']]
      LoggingConfiguration:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt QssLogGroup.Arn
        IncludeExecutionData: true
        Level: ERROR
      Tags:
        - Key: App
          Value: !FindInMap [CustomVariables, qualys, qsstag]
      DefinitionString:
        Fn::ToJsonString:
          Comment: Snapshotting step function
          StartAt: Success
          States:
            Success:
              Type: Succeed
      RoleArn: !GetAtt 'SFRole.Arn'
  AWSSDKWrapperSF:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Join ['',[!Ref AWS::StackName, '-qualys-aws-step-wrapper']]
      LoggingConfiguration:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt QssLogGroup.Arn
        IncludeExecutionData: true
        Level: ERROR
      Tags:
        - Key: App
          Value: !FindInMap [CustomVariables, qualys, qsstag]
      DefinitionString:
        Fn::ToJsonString:
          Comment: Global handler for lambda invocation and errors
          StartAt: LambdaInvoke
          States:
            LambdaInvoke:
              Type: Task
              Resource: arn:aws:states:::lambda:invoke
              TimeoutSeconds: 180
              Parameters:
                Payload.$: "$"
                FunctionName: !GetAtt 'SDKWrapperLambda.Arn'
              Retry:
                - ErrorEquals:
                    - Lambda.ServiceException
                    - Lambda.AWSLambdaException
                    - Lambda.SdkClientException
                    - Lambda.TooManyRequestsException
                  IntervalSeconds: 3
                  MaxAttempts: 60
                  BackoffRate: 1
                  Comment: Lambda limit - retry for 180s @3s interval
                - ErrorEquals:
                    - States.Timeout
                  BackoffRate: 2
                  IntervalSeconds: 2
                  MaxAttempts: 3
                  Comment: step timed out - retry 3 times with back off
                - ErrorEquals:
                    - States.ALL
                  BackoffRate: 2
                  IntervalSeconds: 1
                  MaxAttempts: 3
                  Comment: Any other error type
              OutputPath: "$.Payload"
              End: true
      RoleArn: !GetAtt 'SFRole.Arn'
  AWSSSMWrapperSF:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Join ['',[!Ref AWS::StackName, '-qualys-aws-ssm-wrapper']]
      LoggingConfiguration:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt QssLogGroup.Arn
        IncludeExecutionData: true
        Level: ERROR
      Tags:
        - Key: App
          Value: !FindInMap [CustomVariables, qualys, qsstag]
      DefinitionString:
        Fn::ToJsonString:
          Comment: Global handler for SSM Run Command like calls
          StartAt: SQSSendMessage
          States:
            SQSSendMessage:
              Type: Task
              Resource: arn:aws:states:::sqs:sendMessage.waitForTaskToken
              TimeoutSeconds: 120
              Parameters:
                MessageBody:
                  service: SSM
                  method: startAutomationExecution
                  region.$: $.region
                  params:
                    DocumentName: QualysSfnRunCommandByInstanceIds
                    Parameters:
                      InstanceIds.$: $.InstanceIds
                      taskToken.$: "States.Array($$.Task.Token)"
                      sourceRegion.$: $.sourceRegion
                      workingDirectory:
                        - "/home/ec2-user/"
                      Commands.$: $.Commands
                QueueUrl: !Ref SSMWrapperQueue
              Retry:
                - ErrorEquals:
                    - States.ALL
                  BackoffRate: 2
                  IntervalSeconds: 5
                  MaxAttempts: 2
                  Comment: Any other error type
              End: true
      RoleArn: !GetAtt 'SFRole.Arn'
  StaleCleanupSF:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Join [ '',[ !Ref AWS::StackName, '-qualys-cleanup' ] ]
      LoggingConfiguration:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt QssLogGroup.Arn
        IncludeExecutionData: true
        Level: ERROR
      Tags:
        - Key: App
          Value: !FindInMap [ CustomVariables, qualys, qsstag ]
      DefinitionString:
        Fn::ToJsonString:
          Comment: Stale resource cleanup service for Qualys
          StartAt: GetToken
          States:
            GetToken:
              Type: Task
              Parameters:
                SecretId: !Ref ScannerProperties
              Resource: arn:aws:states:::aws-sdk:secretsmanager:getSecretValue
              Comment: Get user details stored in secret manager
              ResultSelector:
                Secret.$: States.StringToJson($.SecretString)
              OutputPath: "$.Secret"
              Next: Parallel
            Parallel:
              Type: Parallel
              Branches:
                - StartAt: InjectPreviousScanData
                  States:
                    InjectPreviousScanData:
                      Type: Pass
                      Parameters:
                        merged.$: States.JsonMerge($$.Execution.Input.StatePayload, $, false)
                      OutputPath: "$.merged"
                      Next: AccountExistsInInput
                    AccountExistsInInput:
                      Type: Choice
                      Choices:
                        - Variable: "$.scannerInfo"
                          IsPresent: true
                          Next: GenerateRegionAccountCombination
                      Default: RegisterScan
                    RegisterScan:
                      Type: Task
                      Resource: arn:aws:states:::apigateway:invoke
                      TimeoutSeconds: 300
                      Parameters:
                        ApiEndpoint: !Join ['.',[!Ref AGProxyApi, 'execute-api', !Ref AWS::Region, 'amazonaws.com']]
                        Method: GET
                        Headers:
                          QAuth.$: States.Array(States.Format('Bearer {}', $.QToken))
                        Stage: v0
                        Path: "/conn/snapshot/v1.0/register-scanner-run"
                        AuthType: NO_AUTH
                      Retry:
                        - ErrorEquals:
                            - States.ALL
                          BackoffRate: 2
                          IntervalSeconds: 5
                          MaxAttempts: 10
                      Next: GenerateRegionAccountCombination
                      ResultSelector:
                        data.$: "$.ResponseBody"
                      ResultPath: "$.scannerInfo"
                    GenerateRegionAccountCombination:
                      Type: Task
                      Resource: arn:aws:states:::lambda:invoke
                      OutputPath: "$.Payload"
                      Parameters:
                        FunctionName: qualys-util-region-x-account
                        Payload:
                          regions.$: "$.Regions"
                          accounts.$: "$.scannerInfo.data.targetAccounts"
                          amiIds: {}
                          info: {}
                      Retry:
                        - ErrorEquals:
                            - Lambda.ServiceException
                            - Lambda.AWSLambdaException
                            - Lambda.SdkClientException
                            - Lambda.TooManyRequestsException
                          IntervalSeconds: 3
                          MaxAttempts: 60
                          BackoffRate: 1
                          Comment: Lambda limit - retry for 180s @3s interval
                      Next: ForEachRegionXAccount
                    ForEachRegionXAccount:
                      Type: Map
                      MaxConcurrency:
                        Fn::Select:
                          - !Ref Concurrency
                          - [5, 10, 20, 30, 40]
                      ItemProcessor:
                        ProcessorConfig:
                          Mode: INLINE
                        StartAt: DescribeStaleSnapshots
                        States:
                          DescribeStaleSnapshots:
                            Type: Task
                            Resource: arn:aws:states:::states:startExecution.sync:2
                            Parameters:
                              StateMachineArn: !Ref AWSSDKWrapperSF
                              Input:
                                EventId.$: "$$.Execution.Input.EventId"
                                AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$: "$$.Execution.Id"
                                service: EC2
                                method: describeSnapshots
                                region.$: "$.region"
                                roleArn.$: States.Format('arn:aws:iam::{}:role/qualys-snapshot-scanner-cross-account', $.account)
                                params:
                                  Filters:
                                    - Name: tag:App
                                      Values:
                                        - qualys-snapshot-scanner
                            ResultSelector:
                              snapshotIds.$: "$.Output.Snapshots[*].SnapshotId"
                            ResultPath: "$.staleSnapshots"
                            Next: ProcessStaleSnapshots
                            Catch:
                              - ErrorEquals:
                                  - States.ALL
                                Next: Catch Account Errors
                          ProcessStaleSnapshots:
                            Type: Map
                            MaxConcurrency: 5
                            ItemsPath: "$.staleSnapshots.snapshotIds"
                            ItemSelector:
                              snapshotId.$: "$$.Map.Item.Value"
                              region.$: "$.region"
                              account.$: "$.account"
                            ItemProcessor:
                              ProcessorConfig:
                                Mode: INLINE
                              StartAt: DeleteStaleSnapshots
                              States:
                                DeleteStaleSnapshots:
                                  Type: Task
                                  Resource: arn:aws:states:::states:startExecution.sync:2
                                  Parameters:
                                    StateMachineArn: !Ref AWSSDKWrapperSF
                                    Input:
                                      EventId.$: "$$.Execution.Input.EventId"
                                      AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$: "$$.Execution.Id"
                                      service: EC2
                                      method: deleteSnapshot
                                      region.$: "$.region"
                                      roleArn.$: States.Format('arn:aws:iam::{}:role/qualys-snapshot-scanner-cross-account', $.account)
                                      params:
                                        SnapshotId.$: "$.snapshotId"
                                  End: true
                                  Catch:
                                    - ErrorEquals:
                                        - States.ALL
                                      Next: Delete Snapshot Skipped
                                  OutputPath: "$.Output"
                                Delete Snapshot Skipped:
                                  Type: Succeed
                            ResultPath: "$.deletedSnapshots"
                            End: true
                          Catch Account Errors:
                            Type: Pass
                            ResultPath:
                            End: true
                      End: true
              ResultPath: null
              Next: ForEachRegion
              Catch:
                - ErrorEquals:
                    - States.ALL
                  Next: Catch Instance Errors
            Catch Instance Errors:
              Type: Pass
              ResultPath:
              Next: ForEachRegion
            ForEachRegion:
              Type: Map
              MaxConcurrency: 20
              ItemProcessor:
                ProcessorConfig:
                  Mode: INLINE
                StartAt: In Each Region
                States:
                  In Each Region:
                    Type: Parallel
                    Branches:
                      - StartAt: DescribeStaleVolumes
                        States:
                          DescribeStaleVolumes:
                            Type: Task
                            Resource: arn:aws:states:::states:startExecution.sync:2
                            Parameters:
                              StateMachineArn: !Ref AWSSDKWrapperSF
                              Input:
                                EventId.$: "$$.Execution.Input.EventId"
                                AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$: "$$.Execution.Id"
                                service: EC2
                                method: describeVolumes
                                region.$: "$.region"
                                params:
                                  Filters:
                                    - Name: tag:App
                                      Values:
                                        - qualys-snapshot-scanner
                            ResultSelector:
                              volumeIds.$: "$.Output.Volumes[*].VolumeId"
                            ResultPath: "$.staleVolumes"
                            Next: ProcessStaleVolumes
                          ProcessStaleVolumes:
                            Type: Map
                            MaxConcurrency: 5
                            ItemsPath: "$.staleVolumes.volumeIds"
                            ItemSelector:
                              volumeId.$: "$$.Map.Item.Value"
                              region.$: "$.region"
                            ItemProcessor:
                              ProcessorConfig:
                                Mode: INLINE
                              StartAt: DeleteStaleVolumes
                              States:
                                DeleteStaleVolumes:
                                  Type: Task
                                  Resource: arn:aws:states:::states:startExecution.sync:2
                                  Parameters:
                                    StateMachineArn: !Ref AWSSDKWrapperSF
                                    Input:
                                      EventId.$: "$$.Execution.Input.EventId"
                                      AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$: "$$.Execution.Id"
                                      service: EC2
                                      method: deleteVolume
                                      region.$: "$.region"
                                      params:
                                        VolumeId.$: "$.volumeId"
                                  Catch:
                                    - ErrorEquals:
                                        - States.ALL
                                      ResultPath: "$.deleteVolumeError"
                                      Next: Delete Volume Skipped
                                  End: true
                                  OutputPath: "$.Output"
                                Delete Volume Skipped:
                                  Type: Succeed
                                  Comment: Skipped deletion due to error
                            End: true
                      - StartAt: DescribeStaleInstances
                        States:
                          DescribeStaleInstances:
                            Type: Task
                            Resource: arn:aws:states:::states:startExecution.sync:2
                            Parameters:
                              StateMachineArn: !Ref AWSSDKWrapperSF
                              Input:
                                EventId.$: "$$.Execution.Input.EventId"
                                AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$: "$$.Execution.Id"
                                service: EC2
                                method: describeInstances
                                region.$: "$.region"
                                params:
                                  Filters:
                                    - Name: tag:App
                                      Values:
                                        - qualys-snapshot-scanner
                            ResultSelector:
                              InstanceIds.$: "$.Output.Reservations..Instances[*].InstanceId"
                            ResultPath: "$.StaleInstances"
                            Next: ProcessStaleInstance
                          ProcessStaleInstance:
                            Type: Map
                            MaxConcurrency: 5
                            ItemsPath: "$.StaleInstances.InstanceIds"
                            ItemSelector:
                              instanceId.$: "$$.Map.Item.Value"
                              region.$: "$.region"
                            ItemProcessor:
                              ProcessorConfig:
                                Mode: INLINE
                              StartAt: DeleteStaleInstance
                              States:
                                DeleteStaleInstance:
                                  Type: Task
                                  Resource: arn:aws:states:::states:startExecution.sync:2
                                  Parameters:
                                    StateMachineArn: !Ref AWSSDKWrapperSF
                                    Input:
                                      EventId.$: "$$.Execution.Input.EventId"
                                      AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$: "$$.Execution.Id"
                                      service: EC2
                                      method: terminateInstances
                                      region.$: "$.region"
                                      params:
                                        InstanceIds.$: States.Array($.instanceId)
                                  OutputPath: "$.Output"
                                  End: true
                                  Catch:
                                    - ErrorEquals:
                                        - States.ALL
                                      Next: Delete Instance Skipped
                                Delete Instance Skipped:
                                  Type: Succeed
                                  Comment: Skipped deletion due to error
                            ResultPath: "$.deletedVolumes"
                            End: true
                    End: true
              ItemsPath: "$.Regions"
              ItemSelector:
                region.$: "$$.Map.Item.Value"
              ResultPath: "$.ForEachRegionOutput"
              End: true
              Catch:
                - ErrorEquals:
                    - States.ALL
                  Next: Catch Other Errors
            Catch Other Errors:
              Type: Succeed
          TimeoutSeconds: 600
      RoleArn: !GetAtt 'SFRole.Arn'
  CreateSnapshotSF:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Join [ '',[ !Ref AWS::StackName, '-qualys-snapshot-creater' ] ]
      LoggingConfiguration:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt QssLogGroup.Arn
        IncludeExecutionData: true
        Level: ERROR
      Tags:
        - Key: App
          Value: !FindInMap [ CustomVariables, qualys, qsstag ]
      DefinitionString:
        Fn::ToJsonString:
          Comment: Creates snapshot of resources
          StartAt: CreateSnapshot
          States:
            CreateSnapshot:
              Type: Task
              InputPath: $.StatePayload
              Parameters:
                StateMachineArn: !Ref AWSSDKWrapperSF
                Input:
                  EventId.$: "$$.Execution.Input.EventId"
                  AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$: $$.Execution.Id
                  service: EC2
                  method: createSnapshot
                  region.$: $.TargetRegion
                  roleArn.$: States.Format('arn:aws:iam::{}:role/qualys-snapshot-scanner-cross-account', $.TargetAccount)
                  params:
                    VolumeId.$: $.VolumeId
                    Description: Qualys Snapshot Scanner
                    TagSpecifications:
                      - ResourceType: snapshot
                        Tags:
                          - Key: Name
                            Value: QualysSnapshotScanner
                          - Key: App
                            Value: qualys-snapshot-scanner
              Resource: 'arn:aws:states:::states:startExecution.sync:2'
              ResultSelector:
                SnapshotId.$: $.Output.SnapshotId
                Encrypted.$: $.Output.Encrypted
              ResultPath: $.StatePayload.Snapshot
              Next: WaitForSnapshotReady
            WaitForSnapshotReady:
              Type: Wait
              Seconds: 15
              Next: CheckSnapshotProgress
            CheckSnapshotProgress:
              Type: Task
              InputPath: $.StatePayload
              Parameters:
                StateMachineArn: !Ref AWSSDKWrapperSF
                Input:
                  EventId.$: "$$.Execution.Input.EventId"
                  AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$: $$.Execution.Id
                  service: EC2
                  method: describeSnapshots
                  region.$: $.TargetRegion
                  roleArn.$: States.Format('arn:aws:iam::{}:role/qualys-snapshot-scanner-cross-account', $.TargetAccount)
                  params:
                    SnapshotIds.$: States.Array($.Snapshot.SnapshotId)
              Resource: 'arn:aws:states:::states:startExecution.sync:2'
              ResultSelector:
                State.$: '$.Output.Snapshots[0].State'
                Progress.$: '$.Output.Snapshots[0].Progress'
                KmsKeyId.$: '$.Output.Snapshots[0]..KmsKeyId'
              ResultPath: $.StatePayload.SnapshotProgress
              Next: IsSnapshotReady
            SnapshotCompleted:
              Type: Pass
              InputPath: $.StatePayload
              End: true
            IsSnapshotReady:
              Type: Choice
              Choices:
                - Variable: $.StatePayload.SnapshotProgress.State
                  StringMatches: completed
                  Next: SnapshotCompleted
              Default: WaitForSnapshotReady
          TimeoutSeconds: 1800
      RoleArn: !GetAtt 'SFRole.Arn'
  CopySnapshotSF:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Join [ '',[ !Ref AWS::StackName, '-qualys-copy-snapshot' ] ]
      LoggingConfiguration:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt QssLogGroup.Arn
        IncludeExecutionData: true
        Level: ERROR
      Tags:
        - Key: App
          Value: !FindInMap [ CustomVariables, qualys, qsstag ]
      DefinitionString:
        Fn::ToJsonString:
          Comment: Creates snapshot of resources
          StartAt: FormatInput
          States:
            FormatInput:
              Type: Pass
              Next: CreateCopySnapshot
              OutputPath: "$.StatePayload"
            CreateCopySnapshot:
              Type: Task
              Resource: arn:aws:states:::states:startExecution.sync:2
              Parameters:
                StateMachineArn: !Ref AWSSDKWrapperSF
                Input:
                  EventId.$: "$$.Execution.Input.EventId"
                  AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$: "$$.Execution.Id"
                  service: EC2
                  method: copySnapshot
                  region.$: "$.TargetRegion"
                  roleArn.$: States.Format('arn:aws:iam::{}:role/qualys-snapshot-scanner-cross-account', $.TargetAccount)
                  params:
                    SourceSnapshotId.$: "$.Snapshot.SnapshotId"
                    SourceRegion.$: "$.TargetRegion"
                    DestinationRegion.$: "$.TargetRegion"
                    Description: Qualys Snapshot Scanner
                    Encrypted: true
                    KmsKeyId.$: States.Format('arn:aws:kms:{}:{}:alias/qualys-snapshot-key', $.TargetRegion, $.ScannerAccount)
                    TagSpecifications:
                      - ResourceType: snapshot
                        Tags:
                          - Key: Name
                            Value: QualysSnapshotScanner
                          - Key: App
                            Value: qualys-snapshot-scanner
              ResultSelector:
                SnapshotId.$: "$.Output.SnapshotId"
              ResultPath: "$.SnapshotCopy"
              Next: WaitForCopySnapshot
            WaitForCopySnapshot:
              Type: Wait
              Seconds: 15
              Next: GetCopySnapshotStatus
            GetCopySnapshotStatus:
              Type: Task
              Resource: arn:aws:states:::states:startExecution.sync:2
              Parameters:
                StateMachineArn: !Ref AWSSDKWrapperSF
                Input:
                  EventId.$: "$$.Execution.Input.EventId"
                  AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$: "$$.Execution.Id"
                  service: EC2
                  method: describeSnapshots
                  region.$: "$.TargetRegion"
                  roleArn.$: States.Format('arn:aws:iam::{}:role/qualys-snapshot-scanner-cross-account', $.TargetAccount)
                  params:
                    SnapshotIds.$: States.Array($.SnapshotCopy.SnapshotId)
              ResultSelector:
                State.$: "$.Output.Snapshots[0].State"
                Progress.$: "$.Output.Snapshots[0].Progress"
              ResultPath: "$.SnapshotProgress"
              Next: IsCopyCreated
            IsCopyCreated:
              Type: Choice
              Choices:
                - Variable: "$.SnapshotProgress.State"
                  StringMatches: completed
                  Next: DeleteOriginalSnapshot
                  Comment: 'Yes'
              Default: WaitForCopySnapshot
            DeleteOriginalSnapshot:
              Type: Task
              Resource: arn:aws:states:::states:startExecution.sync:2
              Parameters:
                StateMachineArn: !Ref AWSSDKWrapperSF
                Input:
                  EventId.$: "$$.Execution.Input.EventId"
                  AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$: "$$.Execution.Id"
                  service: EC2
                  method: deleteSnapshot
                  region.$: "$.TargetRegion"
                  roleArn.$: States.Format('arn:aws:iam::{}:role/qualys-snapshot-scanner-cross-account', $.TargetAccount)
                  params:
                    SnapshotId.$: "$.Snapshot.SnapshotId"
              ResultPath:
              Next: OverrideSnapshotId
            OverrideSnapshotId:
              Type: Pass
              End: true
              Parameters:
                SnapshotId.$: "$.SnapshotCopy.SnapshotId"
              ResultPath: "$.Snapshot"
          TimeoutSeconds: 600
      RoleArn: !GetAtt 'SFRole.Arn'
  EventRuleRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ "-", [ !Ref AWS::StackName, qualys-event-rule-role ] ]
      Description: An execution role for a event bridge
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: events.amazonaws.com
          Action:
          - 'sts:AssumeRole'
      Tags:
        - Key: App
          Value: !FindInMap [CustomVariables, qualys, qsstag]
  EventRuleInlinePolicy:
    Type: AWS::IAM::Policy
    Properties:
        PolicyName: !Join [ "-", [ !Ref AWS::StackName, qualys-event-rule-policy ] ]
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - "states:StartExecution"
              Resource:
                - !Ref SF
                - !Ref CrossAccountWrapper
        Roles:
          - !Ref EventRuleRole
  SFRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Snapshot registration rule"
      EventPattern:
        source:
          - "aws.cloudformation"
        detail-type:
          - "CloudFormation Stack Status Change"
        detail:
          stack-id:
            - !Ref AWS::StackId
          status-details:
            status:
              - CREATE_COMPLETE
              - UPDATE_COMPLETE
      State: "ENABLED"
      Targets:
        - Arn: !Ref SF
          Id: SF
          RoleArn: !GetAtt 'EventRuleRole.Arn'
  SNAPRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Snapshot evaluation rule"
      ScheduleExpression: !Sub 'rate(${IntervalHours} hours)'
      State: "DISABLED"
      Targets:
        - Arn: !Ref CrossAccountWrapper
          Id: SNAP
          RoleArn: !GetAtt 'EventRuleRole.Arn'
  SSMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'QualysSnapshotScannerSSMRole'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
      Tags:
        - Key: App
          Value: !FindInMap [CustomVariables, qualys, qsstag]
  SSMRoleInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: 'QualysSnapshotScannerSSMRole'
      Path: /
      Roles:
        - !Ref SSMRole

  EventRuleIamPolicyDocument:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Join [ "-", [ !Ref AWS::StackName, qualys-iam-eventrule ] ]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: 'events:InvokeApiDestination'
            Resource: !GetAtt EventsApiDestination.Arn
      Roles:
        - !Ref 'EventRuleRole'
  EventsRuleStepFunction:
    Type: "AWS::Events::Rule"
    Properties:
      Name: !Join [ "-", [ !Ref AWS::StackName, stepfunctions ] ]
      EventPattern: '{"detail":{"status":["SUCCEEDED","FAILED","TIMED_OUT","ABORTED"]},"detail-type":["Step Functions Execution Status Change"],"source":["aws.states"]}'
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt EventsApiDestination.Arn
          Id: ApiDestination
          RoleArn: !GetAtt 'EventRuleRole.Arn'
          RetryPolicy:
            MaximumRetryAttempts: 1
            MaximumEventAgeInSeconds: 60
          # DeadLetterConfig:
          #   Arn: !GetAtt EventRuleDLQ.Arn

  EventsApiDestination:
    Type: "AWS::Events::ApiDestination"
    Properties:
      Name: !Join [ "-", [ !Ref AWS::StackName, qualys-destination ] ]
      ConnectionArn: !GetAtt EventsConnection.Arn
      InvocationEndpoint: !Sub "${QEndpoint}/qflow/aws-eb"
      HttpMethod: "POST"

  EventsConnection:
    Type: "AWS::Events::Connection"
    Properties:
      Name: !Join [ "-", [ !Ref AWS::StackName, qualys-connection ] ]
      AuthorizationType: "API_KEY"
      AuthParameters:
        ApiKeyAuthParameters:
          ApiKeyName: "X-API-KEY"
          ApiKeyValue: QFLOW-SNAPSHOT
        InvocationHttpParameters:
          HeaderParameters:
            - Key: "Authorization"
              Value: !Sub "Bearer ${QToken}"
              IsValueSecret: false
  SSMWrapperQueue:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      VisibilityTimeout: 300
      RedrivePolicy:
        Fn::ToJsonString:
          deadLetterTargetArn: !GetAtt 'SSMWrapperQueueDlQ.Arn'
          maxReceiveCount: 3
  SSMWrapperQueueDlQ:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      VisibilityTimeout: 300